#!/usr/bin/env python3

import socket
from random import sample

bot_host = "gameservers.nj.us.quakenet.org"
bot_port = 6667
bot_nick = "porkjr"
bot_mode = 8
bot_realname = "Pork Jr."
bot_password = "xk!H54CMRg"
bot_owner = "simonlc"
bot_channels = ['#warsow.na', '#pickuptest']
connected = False
topic_mask = "Welcome to #warsow.na!"

# Module Specific
pickup_server = "connect darkbox.us:44440;password pickupftw"
pickups = {'bomb' : [], 'ctf' : [], 'ca' : [], 'tdm' : [], 'tdm2v2' : []}
slots = {'bomb' : 10, 'ctf' : 8, 'ca' : 8, 'tdm' : 8, 'tdm2v2' : 4}

# Helper Functions
def send_raw(string):
    """Converts a string and formats it to be sent to the socket."""
    data = (string + "\r\n").encode()
    irc.send(data)

def send_say(msg, channel):
    """Sends a message to channel or user."""
    data = ("PRIVMSG {} :{}".format(channel, msg))
    send_raw(data)

def send_join(msg, channel):
    """Joins a channel."""
    data = ("JOIN {}".format(channel))
    send_raw(data)

def send_notice(msg, channel):
    """Sends a notice to user or channel."""
    data = ("NOTICE {} :{}".format(channel, msg))
    send_raw(data)

def send_topic(msg, channel):
    """Set the topic, requires +o."""
    data = ("TOPIC {} :{}".format(channel, msg))
    send_raw(data)

def send_qtopic(topic, channel):
    """Set the topic with a Q command, requires +t flag."""
    data = ("PRIVMSG Q :SETTOPIC {} {}".format(channel, topic))
    send_raw(data)

def format_recv(line):
    """Formats lines received from server for easy access."""
    if line.startswith(":"):
        nick = line[1:line.find("!")]
        if "!~" in line:
            host = line[line.find("!~") + 2:line.find(" ")]
        else:
            host = line[line.find("!") + 2:line.find(" ")]
        command = line[line.find(" ") + 1:line.find(" ",line.find(" ") + 1)]
        channel = line[line.find(" ",line.find(" ") + 1) + 1:line[1:].find(":")]
        msg = line[line[1:].find(":") + 2:]
        #TODO: If possible find out Q account name
        return (nick, host, command, channel, msg)

def is_owner(line):
    """Test if owner."""
    return False

def is_op(line):
    """Test if operator."""
    return False

# Module Functions
def pickup_add(nick, host, channel, msg):
    """Add to pickups."""
    games = msg.split()
    valid = False
    if len(games) == 1:
        for i in pickups:
            if nick not in pickups[i]:
                pickups[i].append(nick)
                valid = True

    elif games[1] in pickups:
        for i in games:
            if i in pickups and nick not in pickups[i]:
                pickups[i].append(nick)
                valid = True

    is_full(channel)
    if valid:
        topic_refresh(channel, topic_mask)

def pickup_remove(nick, host, channel, msg):
    #TODO: make auto remove if player leaves
    games = msg.split()
    valid = False
    while True:
        if len(games) == 1:
            for i in pickups:
                if nick in pickups[i]:
                    pickups[i].remove(nick)
                    valid = True
            break
        for i in games:
            if i in pickups and nick in pickups[i]:
                pickups[i].remove(nick)
                valid = True
        break
    if valid:
        topic_refresh(channel, topic_mask)

def is_full(channel):
    for i in pickups:
        if len(pickups[i]) == slots[i]:
            pickup_start(i, channel)

def pickup_start(pickup, channel):
    captains = ", ".join(sample(pickups[pickup], 2))
    send_say("\x0310Game ready @\x0F {}\x0310 - Players:\x0F {}\x0310 \
Captains:\x0F {}".format(pickup_server, ", ".join(pickups[pickup]), captains), channel)
    # Remove players that are playing in this pickup from the lists.
    for i in pickups[pickup][:]:
        for j in pickups:
            if i in pickups[j]:
                pickups[j].remove(i)
    pickups[pickup] = []
    topic_refresh(channel, topic_mask)

def pickup_who(nick, msg):
    games = msg.split()
    who_list = ""
    valid = False
    if len(games) == 1:
        for i in pickups:
            temp = "\x0310{}: \x0F{} ".format(i, ", ".join(pickups[i]))
            who_list += temp
            valid = True

    elif games[1] in pickups:
        for i in games:
            if i in pickups:
                temp = "\x0310{}: \x0F{} ".format(i, ", ".join(pickups[i]))
                who_list += temp
                valid = True

    if valid:
        send_notice(who_list, nick)
    else:
        send_notice("No one added.", nick)

def topic_refresh(channel, topic_mask):
    #TODO: Only refresh if changed
    #TODO: Format this better
    try:
        topic_mask
    except NameError:
        topic_mask = "Welcome to #warsow.na!"

    topic = "\x0310> Bomb\x0F " + str(len(pickups['bomb'])) +"/"+ str(slots['bomb']) + \
            ",\x0310 CTF\x0F " + str(len(pickups['ctf'])) +"/"+ str(slots['ctf']) + \
            ",\x0310 CA\x0F " + str(len(pickups['ca'])) +"/"+ str(slots['ca']) + \
            ",\x0310 TDM\x0F " + str(len(pickups['tdm'])) +"/"+ str(slots['tdm']) + \
            ",\x0310 TDM2v2\x0F " + str(len(pickups['tdm2v2'])) +"/"+ str(slots['tdm2v2']) + \
            " | " + topic_mask
    send_qtopic(topic, channel)

# Connect to IRC
irc = socket.socket()
irc.connect((bot_host, bot_port))
send_raw("NICK {}".format(bot_nick))
send_raw("USER {} {} * :{}".format(bot_nick, bot_mode, bot_realname))

while True:

    data = irc.recv(1024).decode().split("\n")

    for line in data:

        if line.startswith(":"):
            if len(format_recv(line)) == 5:
                #TODO: Put this into vars.
                fline = format_recv(line)

                if fline[2] == "MODE" and not connected:
                    # We're connected, so join channels.
                    send_raw("AUTH {} {}".format(bot_nick, bot_password))
                    send_raw("MODE {} +x".format(bot_nick))
                    send_raw("JOIN {}".format(", ".join(bot_channels)))
                    connected = True

                # TODO Find a better way to do this.
                # Bot Pickup Commands
                if fline[4].startswith(".sub"):
                    send_say("\x0310Sub needed!:\x0F {}".format(pickup_server), fline[3])

                if fline[4].startswith(".mumble"):
                    send_say("\x0310IP:\x0F xannode.com\x0310 Port:\x0F 64738", fline[3])

                if fline[4].startswith(".add"):
                    pickup_add(fline[0], fline[1], fline[3], fline[4])

                if fline[4].startswith(".remove"):
                    pickup_remove(fline[0], fline[1], fline[3], fline[4])

                if fline[4].startswith(".who"):
                    pickup_who(fline[0], fline[4])

                # Bot KOTH Commands
                if fline[4].startswith(".signup"):
                    pass

                if fline[4].startswith(".move"):
                    pass

                if fline[4].startswith(".list"):
                    pass

                # Admin commands
                if fline[4].startswith(".topic"):
                    topic_mask = fline[4].strip(".topic ")
                    topic_refresh(fline[3], topic_mask)

        if line.startswith("PING"):
            send_raw("PONG {}".format(line[5:]))
        else:
            print(line)
